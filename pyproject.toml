[build-system]
requires = ["setuptools>=64.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = ["qdrant_rag"]
packages = []

[project]
name = "qdrant-rag"
version = "1.0.0"
description = "Self-contained RAG pipeline with hybrid vector search using Qdrant and GPU acceleration"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
authors = [
    {name = "User", email = "user@example.com"}
]
keywords = ["rag", "vector-search", "qdrant", "gpu", "embeddings", "retrieval"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Indexing",
    "Environment :: GPU :: NVIDIA CUDA",
]
dependencies = [
    "qdrant-client>=1.7.0",
    "google-generativeai>=0.3.0",
    "unstructured[pdf]>=0.10.0",
    "llama-index-core>=0.10.0",
    "llama-index-embeddings-gemini>=0.1.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "torch>=2.0.0",
    "onnxruntime-gpu>=1.16.0",
    "psutil>=5.9.0",
    "pynvml>=11.5.0",
    "beautifulsoup4>=4.12.0",
    "datasketch>=1.6.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "build>=0.10.0",
]

[project.urls]
Homepage = "https://github.com/user/qdrant-rag"
Repository = "https://github.com/user/qdrant-rag.git"
Issues = "https://github.com/user/qdrant-rag/issues"

[project.scripts]
pipeline = "qdrant_rag:main_cli"

[tool.ruff]
line-length = 88
target-version = "py39"
extend-exclude = [
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # function call in argument defaults
    "N803",   # argument name should be lowercase (for ML conventions)
    "N806",   # variable in function should be lowercase (for ML conventions)
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Allow gradual typing
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "-ra",
]

[tool.coverage.run]
source = ["qdrant_rag"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

